from __future__ import annotations

# ============================================================
# common.py â€” Helpers de UI compartidos
# - make_simple_page: placeholder con tÃ­tulo centrado
# - request_elevation_if_needed: pide cÃ³digo maestro al assistant (si ğŸ”’)
# - ensure_permission: pide elevaciÃ³n si aplica + valida permiso RBAC
#
# Notas:
# * ELEVATION_MINUTES controla la ventana de elevaciÃ³n (default 5 min).
# * Para acciones "ğŸ‘¤ solo propias" debes pasar owner_id en ensure_permission,
#   tÃ­picamente el artist_id dueÃ±o del recurso (cita/portafolio).
# ============================================================

from typing import Optional

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QLabel,
    QInputDialog, QLineEdit, QMessageBox
)

from sqlalchemy.orm import Session

# Ajusta este import si tu factorÃ­a tiene otro nombre o ruta.
from data.db.session import SessionLocal

# RBAC & sesiÃ³n actual
from services.permissions import (
    assistant_needs_code,
    verify_master_code,
    elevate_for,
    can,
)
from services.contracts import get_current_user


# Ventana de elevaciÃ³n por defecto (minutos)
ELEVATION_MINUTES: int = 5


# ------------------------------------------------------------
# Placeholder simple para pÃ¡ginas aÃºn no implementadas
# ------------------------------------------------------------
def make_simple_page(nombre: str) -> QWidget:
    """
    Crea una pÃ¡gina placeholder con un tÃ­tulo centrado.
    Ãštil mientras no implementamos la lÃ³gica real.
    """
    w = QWidget()
    lay = QVBoxLayout(w)
    lay.setContentsMargins(40, 40, 40, 40)
    title = QLabel(nombre)
    title.setObjectName("H1")
    lay.addWidget(title, alignment=Qt.AlignCenter)
    return w


# ------------------------------------------------------------
# ElevaciÃ³n: solicitar cÃ³digo maestro SOLO si es necesario
# (assistant intentando una acciÃ³n marcada como ğŸ”’ en la matriz)
# ------------------------------------------------------------
def request_elevation_if_needed(parent: QWidget, resource: str, action: str) -> bool:
    """
    Si el usuario actual es assistant y la acciÃ³n es ğŸ”’, solicita cÃ³digo maestro,
    valida contra MASTER_CODE_HASH y eleva permisos por ELEVATION_MINUTES.
    Devuelve True cuando:
      - No se requiere elevaciÃ³n (no es assistant o la acciÃ³n no es ğŸ”’), o
      - El cÃ³digo es correcto y se elevÃ³; False en caso contrario.
    """
    user = get_current_user()
    if not user:
        QMessageBox.warning(parent, "SesiÃ³n", "No hay usuario activo.")
        return False

    role = user.get("role")
    if role != "assistant" or not assistant_needs_code(resource, action):
        # No requiere elevaciÃ³n para esta combinaciÃ³n rol/acciÃ³n.
        return True

    # Pedimos el cÃ³digo maestro de forma discreta (input tipo password).
    code, ok = QInputDialog.getText(
        parent,
        "CÃ³digo maestro",
        "Ingresa el cÃ³digo maestro:",
        QLineEdit.Password
    )
    if not ok:
        # Usuario cancelÃ³ el diÃ¡logo.
        return False

    code = (code or "").strip()
    if not code:
        QMessageBox.warning(parent, "CÃ³digo maestro", "El cÃ³digo no puede estar vacÃ­o.")
        return False

    # Verificamos contra el hash guardado en settings.
    with SessionLocal() as db:  # type: Session
        if verify_master_code(code, db):
            elevate_for(user.get("id"), minutes=ELEVATION_MINUTES)
            QMessageBox.information(
                parent,
                "Permiso concedido",
                f"Permisos elevados por {ELEVATION_MINUTES} minutos."
            )
            return True

    QMessageBox.critical(parent, "CÃ³digo invÃ¡lido", "El cÃ³digo maestro no es correcto.")
    return False


# ------------------------------------------------------------
# Helper integral: pide elevaciÃ³n si aplica y luego valida permiso RBAC.
# Ãšsalo en tus handlers de botones/acciones para centralizar todo.
# ------------------------------------------------------------
def ensure_permission(
    parent: QWidget,
    resource: str,
    action: str,
    *,
    owner_id: Optional[int] = None,
) -> bool:
    """
    1) Resuelve elevaciÃ³n si es assistant y acciÃ³n ğŸ”’.
    2) Valida permiso con matriz RBAC (soporta casos 'ğŸ‘¤ solo propias').

    ParÃ¡metros:
      - resource: p.ej. "clients", "reports", "inventory", "agenda", etc.
      - action:   p.ej. "edit", "delete", "export", "create", etc.
      - owner_id: cuando la polÃ­tica es 'own' (ğŸ‘¤), pasa aquÃ­ el artist_id
                  dueÃ±o del recurso que se intenta manipular.

    Retorna True si la acciÃ³n puede continuar, False si no tiene permiso.
    """
    user = get_current_user()
    if not user:
        QMessageBox.warning(parent, "SesiÃ³n", "No hay usuario activo.")
        return False

    # 1) Si la acciÃ³n requiere elevaciÃ³n para assistant, la gestionamos aquÃ­.
    if not request_elevation_if_needed(parent, resource, action):
        return False

    # 2) Validamos permiso con la matriz RBAC ya centralizada.
    allowed = can(
        user.get("role"),
        resource,
        action,
        owner_id=owner_id,                     # necesario para polÃ­ticas 'own'
        user_artist_id=user.get("artist_id"),  # artist_id del usuario actual
        user_id=user.get("id"),                # para validar elevaciÃ³n vigente
    )

    if not allowed:
        QMessageBox.warning(parent, "Permisos", "No tienes permiso para esta acciÃ³n.")
        return False

    return True
